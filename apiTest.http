@baseUrl = {{$dotenv BASE_URL}}/v1



### BaseUrl = http://localhost:5001/toy-project-2-team-4-pizza/us-central1/api/v1

### 사용자 API 테스트 --------------------------------------------

### 새 사용자 생성
POST {{baseUrl}}/users HTTP/1.1
Content-Type: application/json

{
  "displayName": "nakyeonko",
  "email": "nakyeonko@example2.com",
  "photoURL": "https://example.com/photo.jpg",
  "bio": "I'm a mini software engineer"
}

### 사용자 정보 조회
# 아래의 {userId}를 실제 사용자 ID로 교체하세요
# GET {{baseUrl}}/users/{userId} HTTP/1.1
GET {{baseUrl}}/users/hK5m6TFYHXoR0moCOdxu   HTTP/1.1

### 사용자 정보 업데이트
# PUT {{baseUrl}}/users/{userId} HTTP/1.1
PUT {{baseUrl}}/users/hK5m6TFYHXoR0moCOdxu HTTP/1.1
Content-Type: application/json

{
  "displayName":"고길혐",
  "bio": "This is my updated bio"
}

### 사용자 삭제
# DELETE {{baseUrl}}/users/{userId} HTTP/1.1
# !가능하면 임의로 생성한 유저를 삭제 할 것
# !주의 함수는 사용자의 모든 데이터를 삭제함
DELETE {{baseUrl}}/users/WAsRTT39K2std55alS7Y HTTP/1.1

### 사용자 팔로우
# POST {{baseUrl}}/users/{userId}/follow HTTP/1.1
# Content-Type: application/json
# {
#   "targetUserId": "{targetUserId}"
# }
POST {{baseUrl}}/users/hK5m6TFYHXoR0moCOdxu/follow HTTP/1.1
Content-Type: application/json

{
  "targetUserId": "LOqpUwROHvMHB2gJri49"
}

### 사용자 언팔로우
# POST {{baseUrl}}/users/{userId}/unfollow HTTP/1.1
# Content-Type: application/json
# {
#   "targetUserId": "{targetUserId}"
# }
POST {{baseUrl}}/users/hK5m6TFYHXoR0moCOdxu/unfollow HTTP/1.1
Content-Type: application/json

{
  "targetUserId": "LOqpUwROHvMHB2gJri49"
}

### 포스트 API 테스트 --------------------------------------------

### 새 포스트 생성
POST {{baseUrl}}/posts HTTP/1.1
Content-Type: application/json

{
  "userId": "LOqpUwROHvMHB2gJri49",
  "playlistId": "playlist123",
  "content": "넥스트js 왜 쓰는지 그만 알아보자",
  "video": "https://www.youtube.com/watch?v=EGOkjmyfL6E"
}

### 모든 포스트
### GET /api/posts
### 포스트에는 사용자 정보, 댓글, 좋아요 정보가 포함되어 있음
### 10개의 포스트를 가져옴
GET {{baseUrl}}/posts HTTP/1.1

### 포스트 좋아요 누르기
### POST /api/posts/{postId}/like
POST {{baseUrl}}/posts/cvlTVPhgTG1JJ3ZVPJ8u/like HTTP/1.1
Content-Type: application/json

{
  "userId": "bHp184r9uCUY8fXtMtkk"
}

### 특정 사용자의 게시물
### GET /api/posts?userId={userId}
GET {{baseUrl}}/posts?userId=LOqpUwROHvMHB2gJri49 HTTP/1.1


### 특정 포스트 가져오기, postId를 사용하여 특정 포스트 가져오기
### GET /api/posts/{postId}
GET {{baseUrl}}/posts/cvlTVPhgTG1JJ3ZVPJ8u HTTP/1.1


### 포스트 수정
### PUT /api/posts/{postId}
PUT {{baseUrl}}/posts/cvlTVPhgTG1JJ3ZVPJ8u HTTP/1.1
Content-Type: application/json

{
  "userId": "LOqpUwROHvMHB2gJri49",
  "playlistId": "playlist123",
  "video": "video1Url",
  "content": "수정 게시물"
}

### 포스트 삭제
###! 주의 포스트 삭제시 댓글, 좋아요도 함께 삭제됨
### DELETE /api/posts/{postId}
DELETE {{baseUrl}}/posts/cvlTVPhgTG1JJ3ZVPJ8u HTTP/1.1
Content-Type: application/json

{
  "userId": "LOqpUwROHvMHB2gJri49"
}



### 타임라인 API 테스트 --------------------------------------------

### 무한 스크롤
### GET /api/timeline?lastId={lastId}&UserId={UserID}&limit={limit number}
### lastId: 마지막으로 불러온 포스트의 아이디, 이후에는 이 아이디 이후의 포스트를 가져옴
### limit: 한번에 가져올 포스트의 수
### 포스트 우선 순위는 팔로우한 사용자의 포스트가 먼저 나오고, 그 다음에는 최신순으로 나옴
GET {{baseUrl}}/timeline?&userId=LOqpUwROHvMHB2gJri49&limit=10  HTTP/1.1


####
GET {{baseUrl}}/timeline?&userId=LOqpUwROHvMHB2gJri49&limit=10&lastPostId=cvlTVPhgTG1JJ3ZVPJ8u  HTTP/1.1



#### 댓글

### 댓글 달기
### POST /api/comments
POST {{baseUrl}}/comments HTTP/1.1
Content-Type: application/json

{
  "userId": "bHp184r9uCUY8fXtMtkk",
  "postId": "cvlTVPhgTG1JJ3ZVPJ8u",
  "content": "댓글1"
}

### 댓글 가져오기
### GET /api/comments?postId=1
GET {{baseUrl}}/comments?postId=cvlTVPhgTG1JJ3ZVPJ8u HTTP/1.1

### 댓글 좋아요 누르기
### POST /api/comments/1/like
POST {{baseUrl}}/comments/1/like HTTP/1.1
Content-Type: application/json

{
  "userId": "bHp184r9uCUY8fXtMtkk"
}

### 댓글 삭제
### DELETE /api/comments/1
DELETE {{baseUrl}}/comments/1 HTTP/1.1
Content-Type: application/json

{
  "userId": "bHp184r9uCUY8fXtMtkk"
}


### 댓글 수정
### PUT /api/comments/1
PUT {{baseUrl}}/comments/1 HTTP/1.1

{
  "userId": "bHp184r9uCUY8fXtMtkk",
  "content": "수정된 댓글"
}

# ### 대댓글 달기
# ### POST /api/comments/1/reply
# POST {{baseUrl}}/comments/1/reply HTTP/1.1
# Content-Type: application/json

# {
#   "userId": "bHp184r9uCUY8fXtMtkk",
#   "content": "대댓글1"
# }

# ### 대댓글 삭제
# ### DELETE /api/comments/1/reply/1
# DELETE {{baseUrl}}/comments/1/reply/1 HTTP/1.1

### ------------------------------

##### 플레이리스트

### 새 플레이리스트 생성
POST {{baseUrl}}/playlists HTTP/1.1
Content-Type: application/json

{
  "userId": "user123",
  "title": "My Awesome Playlist",
  "description": "This is a test playlist",
  "isPublic": true,
  "videos": ["video1Url", "video2URL", "video3URL"]
}

### 모든 플레이리스트 
GET {{baseUrl}}/playlists HTTP/1.1

### 특정 플레이리스트 아이디로 플레이리스트 가져오기
### GET /api/playlists/playlist123
GET {{baseUrl}}/playlists/Fdpk6YOi4d8djfGfWM8v HTTP/1.1


### 특정 사용자의 플레이리스트
GET {{baseUrl}}/playlists?userId=user123 HTTP/1.1

### 플레이리스트 수정
PUT {{baseUrl}}/playlists/Fdpk6YOi4d8djfGfWM8v HTTP/1.1
Content-Type: application/json

{
  "title": "My Awesome Playlist234",
  "userId": "user124",
  "description": "This is a test playlist",
  "isPublic": true,
  "videos": ["video1Url", "video2URL", "video3URL"]
}

### 플레이리스트 구독
POST {{baseUrl}}/playlists/Fdpk6YOi4d8djfGfWM8v/subscribe HTTP/1.1


### 플레이리스트 삭제
DELETE {{baseUrl}}/playlists/Fdpk6YOi4d8djfGfWM8v HTTP/1.1
Content-Type: application/json

{
  "userId": "user124"
}


### ------------------------------

##### 비디오

# @Collection()
# export class Video {
#   id!: string;
#   userId!: string;
#   title!: string;
#   videoUrl!: string;
#   uploadDate!: Date;
#   thumbnailUrl!: string;
#   views!: number;
#   creater!: string;
# }

### 비디오 정보
GET {{baseUrl}}/videos/videoID HTTP/1.1

### repose example
# {
#   "id": "video123",
#   "userId": "user123",
#   "title": "My Awesome Video",
#   "videoUrl": "https://www.youtube.com",
#   "uploadDate": "2021-08-10",
#   "thumbnailUrl": "https://www.google.com",
#   "views": 100,
#   "creater": "nakyeon"
# }


### 비디오 업로드
POST {{baseUrl}}/videos HTTP/1.1
Content-Type: application/json

{
  "userId": "user123",
  "videoUrl": "https://www.youtube.com",
}